-- Drop existing tables if they exist to recreate them correctly
DROP TABLE IF EXISTS "public"."user_traffic_filters";
DROP TABLE IF EXISTS "public"."notification_history";

-- Table for user traffic filters
CREATE TABLE "public"."user_traffic_filters" (
    "id" uuid NOT NULL DEFAULT gen_random_uuid(),
    "user_id" uuid NOT NULL,
    "counties" text[] NULL,
    "municipalities" text[] NULL,
    "road_numbers" text[] NULL,
    "event_types" text[] NULL,
    "notifications_enabled" boolean NULL DEFAULT true,
    "sound_alerts" boolean NULL DEFAULT false,
    "high_priority_only" boolean NULL DEFAULT false,
    "created_at" timestamp with time zone NULL DEFAULT now(),
    "updated_at" timestamp with time zone NULL DEFAULT now(),
    "severity_filter" text[] NULL,
    CONSTRAINT "user_traffic_filters_pkey" PRIMARY KEY (id),
    CONSTRAINT "user_traffic_filters_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);

-- Table for notification history
CREATE TABLE "public"."notification_history" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid NOT NULL,
    "event_id" character varying(255) NULL,
    "event_type" character varying(100) NULL,
    "message" text NULL,
    "sent_at" timestamp with time zone NULL DEFAULT now(),
    "read_at" timestamp with time zone NULL,
    CONSTRAINT "notification_history_pkey" PRIMARY KEY (id),
    CONSTRAINT "notification_history_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);

-- Indexes
CREATE INDEX "idx_user_filters" ON "public"."user_traffic_filters" USING btree (user_id);
CREATE INDEX "idx_notification_history" ON "public"."notification_history" USING btree (user_id, sent_at);

-- RLS Policies
ALTER TABLE "public"."user_traffic_filters" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own traffic filters" ON "public"."user_traffic_filters"
AS PERMISSIVE FOR ALL
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

ALTER TABLE "public"."notification_history" ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own notification history" ON "public"."notification_history"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (auth.uid() = user_id);